Description: >
  Starting template for Sagemaker-Groundtruth-Demo
  Last Modified: March 31 2020

Parameters:
  LabelingS3Bucket:
    Type: String
    Default: huberttest-pdx

Resources:

  AddRoleToInstanceFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          from __future__ import print_function
          import boto3
          import logging
          import json
          import cfnresponse
          from datetime import datetime
          from botocore.exceptions import ClientError

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.debug('Event: {}'.format(event))
              logger.debug('Context: {}'.format(context))
              responseData = {}

              s3Client = boto3.client('s3')
              smClient = boto3.client('sagemaker')

              # Define some variables for creating folders and such
              now = datetime.now()
              timePrefix = now.strftime("%d-%m-%Y-%H-%M-%S")

              LabelCategoryConfigFileName = 'LabelCategoryConfig.json'
              LabelCategoryConfigLocalPath = '/tmp'
              LabelCategoryConfigS3Bucket = 'huberttest-pdx'
              LabelCategoryConfigS3Path = 'sm-groundtruth'
              LabelJobName = 'LabelingJob-'+timePrefix
              LabelJobTitle = LabelJobName

              LabelJobOutputPath = 's3://'+LabelCategoryConfigS3Bucket+'/'+LabelCategoryConfigS3Path+'/output/'
              # LabelJobUiTemplatePath = LabelJobOutputPath+LabelJobName+'/annotation-tool/template.liquid'
              LabelJobUiTemplatePath = LabelJobOutputPath+'cfn-testing/annotation-tool/template.liquid'

              # Immediately respond on Delete
              if event['RequestType'] == 'Delete':
                  try:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'CustomResourcePhysicalID')
                  except Exception as e:
                      logger.error(e, exc_info=True)
                      responseData = {'Error': traceback.format_exc(e)}
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData, 'CustomResourcePhysicalID')

              if event['RequestType'] == 'Update':
                  try:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'CustomResourcePhysicalID')
                  except Exception as e:
                      logger.error(e, exc_info=True)
                      responseData = {'Error': traceback.format_exc(e)}
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData, 'CustomResourcePhysicalID')

              if event['RequestType'] == 'Create':
                  localFile = open(LabelCategoryConfigLocalPath+'/'+LabelCategoryConfigFileName, "w")
                  localFile.write('''
                      {
                          "document-version": "2018-11-28",
                          "labels": [
                              {
                                  "label": "Tennis!"
                              },
                              {
                                  "label": "Not Tennis!"
                              },
                              {
                                  "label": "A boat"
                              }
                          ]
                      }'''
                  )

                  localFile.close()


                  try:
                      response = s3Client.upload_file(LabelCategoryConfigLocalPath+'/'+LabelCategoryConfigFileName, LabelCategoryConfigS3Bucket, LabelCategoryConfigS3Path+"/"+LabelCategoryConfigFileName)

                      response = smClient.create_labeling_job(
                          LabelingJobName=LabelJobName,
                          LabelAttributeName='TennisOrNot',
                          InputConfig={
                              'DataSource': {
                                  'S3DataSource': {
                                      'ManifestS3Uri': 's3://huberttest-pdx/sm-groundtruth/manifest.json'
                                  }
                              }
                          },
                          OutputConfig={
                              'S3OutputPath': LabelJobOutputPath
                              # 'KmsKeyId': 'string'
                          },
                          RoleArn='arn:aws:iam::521243010531:role/service-role/AmazonSageMaker-ExecutionRole-20200303T135454',
                          LabelCategoryConfigS3Uri='s3://'+LabelCategoryConfigS3Bucket+'/'+LabelCategoryConfigS3Path+'/'+LabelCategoryConfigFileName,
                          HumanTaskConfig={
                              'WorkteamArn': 'arn:aws:sagemaker:us-west-2:521243010531:workteam/private-crowd/SageMakerDefaultWorkTeam-dOunDRSoTSKd',
                              'UiConfig': {
                                  'UiTemplateS3Uri': LabelJobUiTemplatePath
                              },
                              'PreHumanTaskLambdaArn': 'arn:aws:lambda:us-west-2:081040173940:function:PRE-ImageMultiClass',
                              # 'TaskKeywords': [
                              #     'string',
                              # ],
                              'TaskTitle': LabelJobTitle,
                              'TaskDescription': 'Some Cool Description',
                              'NumberOfHumanWorkersPerDataObject': 1,
                              'TaskTimeLimitInSeconds': 600,
                              # 'TaskAvailabilityLifetimeInSeconds': 123,
                              # 'MaxConcurrentTaskCount': 123,
                              'AnnotationConsolidationConfig': {
                                  'AnnotationConsolidationLambdaArn': 'arn:aws:lambda:us-west-2:081040173940:function:ACS-ImageMultiClass'
                              }
                          },
                          LabelingJobAlgorithmsConfig={
                              'LabelingJobAlgorithmSpecificationArn': 'arn:aws:sagemaker:us-west-2:027400017018:labeling-job-algorithm-specification/image-classification',
                              # 'InitialActiveLearningModelArn': 'string',
                              # 'LabelingJobResourceConfig': {
                              #     'VolumeKmsKeyId': 'string'
                              # }
                          }
                      )
                      print(response)
                      responseData = {'Success': 'Role added to instance'+instanceId+'.'}
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'CustomResourcePhysicalID')
                  except Exception as e:
                      logger.error(e, exc_info=True)
                      responseData = {'Error': traceback.format_exc(e)}
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData, 'CustomResourcePhysicalID')

      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.7
      Timeout: '300'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: labelingJobMinimalPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            Resource: !Sub arn:aws:s3:::${LabelingS3Bucket}/*
          - Effect: Allow
            Action:
            - iam:PassRole
            - sagemaker:CreateLabelingJob
            Resource: '*'
